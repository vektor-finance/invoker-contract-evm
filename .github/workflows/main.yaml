name: main

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

env:
  ETHERSCAN_TOKEN: ${{ secrets.ETHERSCAN_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  WEB3_INFURA_PROJECT_ID: ${{ secrets.WEB3_INFURA_PROJECT_ID }}

  # Node URLS
  NODE_ETHEREUM_MAINNET_URL: ${{ secrets.NODE_ETHEREUM_MAINNET_URL }}
  NODE_ETHEREUM_RINKEBY_URL: ${{ secrets.NODE_ETHEREUM_RINKEBY_URL }}
  NODE_POLYGON_MAINNET_URL: ${{ secrets.NODE_POLYGON_MAINNET_URL }}
  NODE_POLYGON_MUMBAI_URL: ${{ secrets.NODE_POLYGON_MUMBAI_URL }}

  # increasing available memory for node reduces issues with ganache crashing
  # https://nodejs.org/api/cli.html#cli_max_old_space_size_size_in_megabytes
  NODE_OPTIONS: --max_old_space_size=4096

  CACHED_COMPILER_PATHS: |
    ~/.solcx
    ~/.vvm

  CACHED_PYTHON_DEPENDENCY_PATHS: |
    ~/.cache/pip

  CACHED_NODE_DEPENDENCY_PATHS: |
    ${{ github.workspace }}/node_modules

jobs:

  lint_and_tests:
    name: Install dependencies, run lint and tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        network:
          - mainnet-hardhat-fork
          - rinkeby-hardhat-fork
          - polygon-hardhat-fork
          - mumbai-hardhat-fork

    steps:
      - name: Checkout current commit (${{ github.sha }})
        id: checkout
        uses: actions/checkout@v2

      - name: Cache Compiler Installations
        id: cache_compiler_installations
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_COMPILER_PATHS }}
          key: ${{ runner.os }}-compiler-cache

      - name: Setup Node.js
        id: setup_node
        uses: actions/setup-node@v2

      - name: Cache Node dependencies
        id: cache_node_dependencies
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHED_NODE_DEPENDENCY_PATHS }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install Node dependencies
        id: install_node_dependencies
        run: yarn install

      - name: Run lint checks
        id: lint
        run: yarn run lint

      - name: Setup Python 3.8
        id: setup_python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Cache Python dependencies
        uses: actions/cache@v2
        id: cache_python_dependencies
        with:
          path: ${{ env.CACHED_PYTHON_DEPENDENCY_PATHS }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.*txt') }}

      - name: Install Python dependencies
        id: install_python_dependencies
        run: pip install -r requirements.dev.txt -r requirements.txt

      - name: Install pre-commit hooks
        id: install_pre_commit
        run: pre-commit install

      - name: Run pre-commit checks
        id: run_pre_commit
        run: pre-commit run --all-files

      - name: Create .env file (unused)
        id: create_env_file
        run: touch .env

      - name: Copy network-config.yaml to ~/.brownie
        id: copy_network_config
        run: mkdir ~/.brownie && cp network-config.yaml ~/.brownie/

      - name: Run Tests
        id: brownie_tests
        run: brownie test --network=${{ matrix.network }} -v

  build_docker:
    name: Build Docker Container
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      DOCKER_TAG_SHA: vektor/invoker-deploy:${{ github.sha }}
      DOCKER_TAG_LATEST: vektor/invoker-deploy:latest

    steps:
      - name: Build
        uses: docker/build-push-action@v2
        with:
          tags: |
            ${{ env.DOCKER_TAG_SHA }}
            ${{ env.DOCKER_TAG_LATEST }}
          cache-from: type=registry,ref=${{ env.DOCKER_TAG_LATEST }}
          cache-to: type=inline
      - name: Test
        run: docker run vektor/invoker-deploy:latest brownie